@page "/operarios/create"
@using Microsoft.EntityFrameworkCore
@using Lab.Components.Models
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create Operario</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Operario" OnValidSubmit="AddOperario" FormName="createOperarioForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="username" class="form-label">UserName:</label>
                <InputText id="username" @bind-Value="Operario.Username" class="form-control" />
                <ValidationMessage For="() => Operario.Username" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" @bind-Value="Operario.Password" class="form-control" />
                <ValidationMessage For="() => Operario.Password" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="numerooperario" class="form-label">NumeroOperario:</label>
                <InputNumber id="numerooperario" @bind-Value="Operario.NumeroOperario" class="form-control" />
                <ValidationMessage For="() => Operario.NumeroOperario" class="text-danger" />
            </div>

            <!-- Selector de Oficina -->
            <div class="mb-3">
                <label for="oficina" class="form-label">Oficina:</label>
                <select id="oficina" class="form-select" @onchange="OnOficinaChange">
                    <option value="">Selecciona una oficina</option>
                    @foreach (var oficina in OficinasDisponibles)
                    {
                        <option value="@oficina.idOficina">@oficina.idOficina</option>
                    }
                </select>
                <ValidationMessage For="() => Operario.PuestoAsignadoId" class="text-danger" />
            </div>

            <!-- Selector de Puesto (dependiente de la Oficina seleccionada) -->
            @if (PuestosDisponibles != null && PuestosDisponibles.Any())
            {
                <div class="mb-3">
                    <label for="puesto" class="form-label">Puesto:</label>
                    <select id="puesto" class="form-select" @bind="Operario.PuestoAsignadoId">
                        <option value="">Selecciona un puesto</option>
                        @foreach (var puesto in PuestosDisponibles)
                        {
                            <option value="@puesto.NroPuesto">@puesto.NroPuesto</option>
                        }
                    </select>
                    <ValidationMessage For="() => Operario.PuestoAsignadoId" class="text-danger" />
                </div>
            }

            @if (ErrorMessage != null)
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/operarios">Back to List</a>
</div>

@code {
    private Operario Operario { get; set; } = new();
    private List<Oficina> OficinasDisponibles = new();
    private List<Puesto> PuestosDisponibles = new();
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        OficinasDisponibles = await context.Oficina.AsNoTracking().ToListAsync();
    }

    private async Task OnOficinaChange(ChangeEventArgs e)
    {
        var selectedOficinaId = int.Parse(e.Value?.ToString() ?? "0");

        using var context = DbFactory.CreateDbContext();

        // obtengo puestos ocupados
        var puestosOcupados = await context.Operario
            .Where(o => o.PuestoAsignadoId != null)
            .Select(o => o.PuestoAsignadoId)
            .ToListAsync();

        // obtengo los puestos que no estan ocupados
        PuestosDisponibles = await context.Puesto
            .Where(p => p.idOficina == selectedOficinaId && !puestosOcupados.Contains(p.NroPuesto))
            .AsNoTracking()
            .ToListAsync();

        StateHasChanged(); 
    }




    private async Task AddOperario()
    {
        using var context = DbFactory.CreateDbContext();
        var puestoExistente = await context.Puesto
            .AsNoTracking()
            .FirstOrDefaultAsync(p => p.NroPuesto == Operario.PuestoAsignadoId);

        if (puestoExistente == null)
        {
            ErrorMessage = "El puesto asignado no existe o no está disponible.";
            return;
        }

        context.Operario.Add(Operario);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/operarios");
    }
}
