@page "/operarios/delete"
@using Microsoft.EntityFrameworkCore
@using Lab.Components.Models
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserSessionService UserSessionService

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Operario</h2>
    <hr />
    @if (operario is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">NumeroOperario</dt>
            <dd class="col-sm-10">@operario.NumeroOperario</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PuestoAsignadoId</dt>
            <dd class="col-sm-10">@operario.PuestoAsignadoId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Password</dt>
            <dd class="col-sm-10">@operario.Password</dd>
        </dl>
        <EditForm method="post" Model="operario" OnValidSubmit="DeleteOperario" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger btn-lg" disabled="@(operario is null)">Delete</button> |
            <a class=" btn  btn-secondary btn-lg" href="/operarios">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Operario? operario;

    [SupplyParameterFromQuery]
    private string Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSessionService.IsUserLoggedIn())
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        // Verificar el rol del usuario
        if (!UserSessionService.HasRole("Administrador"))
        {
            var (username, role) = UserSessionService.GetCurrentSession();

            // Redirigir basado en el rol del usuario
            switch (role)
            {
                case "Operario":
                    NavigationManager.NavigateTo("/cubiculo");
                    break;
                case "GerenteCalidad":
                    NavigationManager.NavigateTo("/gerente-calidad");
                    break;
                default:
                    NavigationManager.NavigateTo("/");
                    break;
            }
            return;
        }
        using var context = DbFactory.CreateDbContext();
        operario = await context.Operario.FirstOrDefaultAsync(m => m.Username == Username);

        if (operario is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteOperario()
    {
        using var context = DbFactory.CreateDbContext();
        context.Operario.Remove(operario!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/operarios");
    }
}
