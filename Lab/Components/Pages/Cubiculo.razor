@page "/cubiculo"
@attribute [StreamRendering]
@inject NavigationManager Navigation
@inject UserSessionService UserSessionService
@using Lab.Components.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@rendermode InteractiveServer

<h3>Cubiculo</h3>

<div>
    <div>
        <p>Username: @username</p>
        <p>Role: @role</p>
    </div>
    <div>
        <p>Trámite actual: @tramiteActual?.NroTramite ?? "No hay trámite asignado"</p>
        <p>Fecha de inicio: @tramiteActual?.FechaInicio.ToString("dd/MM/yyyy") ?? "No disponible"</p>
    </div>
    <button class="btn btn-success" @onclick="TerminarTramite">Terminar Trámite</button>
    <button class="btn btn-primary" @onclick="SiguienteTramite">Siguiente Trámite</button>
</div>

@code {
    private string username;
    private string role;
    private Puesto puesto;  // hay que buscar el puesto asignado al operario
    private Tramite tramiteActual;  // Buscar el trámite actual asignado al puesto

    protected override async Task OnInitializedAsync()
    {
        var session = UserSessionService.GetCurrentSession();
        username = session.username ?? "No user";
        role = session.role ?? "No role";

        using var context = await DbFactory.CreateDbContextAsync();

        if (role == "Operario")
        {
            var usuario = await context.Usuario.FirstOrDefaultAsync(u => u.Username == username);

            if (usuario is Operario operario)
            {
                puesto = await context.Puesto.FirstOrDefaultAsync(p => p.NroPuesto == operario.PuestoAsignadoId);

                if (puesto != null)
                {
                    // Obtener el trámite actual del puesto
                    tramiteActual = await context.Tramite.FirstOrDefaultAsync(t => t.NroPuesto == puesto.NroPuesto.ToString());

                    if (tramiteActual == null)
                    {
                        Console.WriteLine("No se encontró un trámite actual para este puesto.");
                    }
                }
                else
                {
                    Console.WriteLine("Error: No se encontró un puesto asignado para este operario.");
                }
            }
        }
    }

    private async Task TerminarTramite()
    {
        if (puesto != null && tramiteActual != null)
        {
            // Asignar la fecha de fin al trámite actual
            tramiteActual.FechaFin = DateTime.Now;

            using var context = await DbFactory.CreateDbContextAsync();

            // Guardar los cambios en la base de datos
            context.Puesto.Update(puesto);
            context.Tramite.Update(tramiteActual);
            await context.SaveChangesAsync();

            Console.WriteLine("Trámite terminado.");
        }
        else
        {
            Console.WriteLine("Error: No hay trámite o puesto asignado.");
        }
    }

    private async Task SiguienteTramite()
    {
        if (puesto != null)
        {
            try
            {
                using var context = await DbFactory.CreateDbContextAsync();

                // Obtener todos los trámites con NroPuesto NULL o vacío
                var tramitesSinPuesto = await context.Tramite
                    .Where(t => t.NroPuesto == null || t.NroPuesto == "--" || t.NroPuesto == "")
                    .ToListAsync();

                // Depuración: Verifica cuántos trámites se han encontrado
                Console.WriteLine($"Se encontraron {tramitesSinPuesto.Count} trámites sin puesto asignado.");

                // Si hay trámites disponibles, asignar el número de puesto
                if (tramitesSinPuesto.Any())
                {
                    var siguienteTramite = tramitesSinPuesto.FirstOrDefault();  // Obtén el primer trámite sin puesto

                    if (siguienteTramite != null)
                    {
                        // Asignar el número de puesto del operario al siguiente trámite
                        siguienteTramite.NroPuesto = puesto.NroPuesto.ToString();

                        // Actualizar la base de datos
                        context.Tramite.Update(siguienteTramite);
                        await context.SaveChangesAsync();

                        // Actualizar el trámite actual para mostrar los datos
                        tramiteActual = siguienteTramite;

                        Console.WriteLine($"Se asignó el puesto {puesto.NroPuesto} al siguiente trámite: {siguienteTramite.NroTramite}");
                    }
                }
                else
                {
                    Console.WriteLine("No se encontró un trámite disponible para asignar.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al asignar el siguiente trámite: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Error: No hay puesto asignado para este operario.");
        }
    }
}
