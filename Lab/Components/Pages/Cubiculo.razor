@page "/cubiculo"
@attribute [StreamRendering]
@inject NavigationManager Navigation
@inject UserSessionService UserSessionService
@using Lab.Components.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject IHubContext<Lab.Components.Hubs.TramiteHub> TramiteHubContext
@rendermode InteractiveServer
@implements IAsyncDisposable

<h3>Cubiculo</h3>

<div>
    <div>
        <p>Username: @username</p>
        <p>Role: @role</p>
    </div>
    <div>
        <p>Trámite actual: @tramiteActual?.NroTramite ?? "No hay trámite asignado"</p>
        <p>Fecha de inicio: @tramiteActual?.FechaInicio.ToString("dd/MM/yyyy") ?? "No disponible"</p>
    </div>
    <button class="btn btn-success" @onclick="TerminarTramite">Terminar Trámite</button>
    <button class="btn btn-primary" @onclick="SiguienteTramite" disabled="@(esTramiteActivo)">Siguiente Trámite</button>
    <button class="btn btn-warning" @onclick="LlamarDeNuevo">Llamar de nuevo</button>
</div>

@code {
    private HubConnection hubConnection;
    private string username;
    private string role;
    private Puesto puesto;  // hay que buscar el puesto asignado al operario
    private Tramite tramiteActual;  // Buscar el trámite actual asignado al puesto
    private bool esTramiteActivo; // Controla si el trámite actual está activo

    protected override async Task OnInitializedAsync()
    {
        var session = UserSessionService.GetCurrentSession();
        username = session.username ?? "No user";
        role = session.role ?? "No role";

        using var context = await DbFactory.CreateDbContextAsync();

        hubConnection = new HubConnectionBuilder()
           .WithUrl(Navigation.ToAbsoluteUri("/tramiteHub"))
           .Build();

        // Escuchar el evento para actualizaciones en tiempo real
        hubConnection.On("ReceiveTramiteUpdate", async () =>
        {
            await TramiteHubContext.Clients.All.SendAsync("TramiteActualizado");
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await base.OnInitializedAsync();

        if (role == "Operario")
        {
            var usuario = await context.Usuario.FirstOrDefaultAsync(u => u.Username == username);

            if (usuario is Operario operario)
            {
                puesto = await context.Puesto.FirstOrDefaultAsync(p => p.NroPuesto == operario.PuestoAsignadoId);

                if (puesto != null)
                {
                    // Obtener el trámite actual del puesto
                    tramiteActual = await context.Tramite.FirstOrDefaultAsync(t => t.NroPuesto == puesto.NroPuesto.ToString());

                    // Determinar si hay un trámite activo (para habilitar/deshabilitar el botón)
                    esTramiteActivo = tramiteActual != null;

                    if (tramiteActual == null)
                    {
                        Console.WriteLine("No se encontró un trámite actual para este puesto.");
                    }
                }
                else
                {
                    Console.WriteLine("Error: No se encontró un puesto asignado para este operario.");
                }
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task TerminarTramite()
    {
        if (puesto != null && tramiteActual != null)
        {
            tramiteActual.FechaFin = DateTime.Now;

            using var context = await DbFactory.CreateDbContextAsync();

            puesto.TramiteActual = 0;

            context.Puesto.Update(puesto);
            context.Tramite.Update(tramiteActual);
            await context.SaveChangesAsync();

            Console.WriteLine("Trámite terminado.");

            // Notificar a SignalR que el trámite ha sido actualizado
            await TramiteHubContext.Clients.All.SendAsync("ReceiveTramiteUpdate");

            // Actualizar el estado de esTramiteActivo para habilitar "Siguiente Trámite"
            tramiteActual = null;
            esTramiteActivo = false;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error: No hay trámite o puesto asignado.");
        }
    }

    private async Task SiguienteTramite()
    {
        if (puesto != null)
        {
            try
            {
                using var context = await DbFactory.CreateDbContextAsync();

                var tramitesSinPuesto = await context.Tramite
                    .Where(t => t.NroPuesto == null || t.NroPuesto == "--" || t.NroPuesto == "")
                    .ToListAsync();

                if (tramitesSinPuesto.Any())
                {
                    var siguienteTramite = tramitesSinPuesto.FirstOrDefault();

                    if (siguienteTramite != null)
                    {
                        siguienteTramite.NroPuesto = puesto.NroPuesto.ToString();

                        puesto.TramiteActual = siguienteTramite.NroTramite;
                        context.Puesto.Update(puesto);

                        context.Tramite.Update(siguienteTramite);
                        await context.SaveChangesAsync();

                        tramiteActual = siguienteTramite;

                        Console.WriteLine($"Se asignó el puesto {puesto.NroPuesto} al siguiente trámite: {siguienteTramite.NroTramite}");

                        // Cambiar estado para indicar que hay un trámite activo
                        esTramiteActivo = true;
                        await TramiteHubContext.Clients.All.SendAsync("ReceiveTramiteUpdate");
                        StateHasChanged();
                    }
                }
                else
                {
                    Console.WriteLine("No se encontró un trámite disponible para asignar.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al asignar el siguiente trámite: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Error: No hay puesto asignado para este operario.");
        }
    }

    private async Task LlamarDeNuevo()
    {
        if (tramiteActual != null)
        {
            // Notificar a SignalR que se ha solicitado "Llamar de nuevo" para el trámite actual
            await TramiteHubContext.Clients.All.SendAsync("ReceiveLlamarDeNuevo", tramiteActual.NroTramite);
            Console.WriteLine("Llamar de nuevo solicitado para trámite: " + tramiteActual.NroTramite);
        }
        else
        {
            Console.WriteLine("Error: No hay trámite asignado para llamar de nuevo.");
        }
    }

}
