@page "/cubiculo"
@attribute [StreamRendering]
@inject NavigationManager Navigation
@inject UserSessionService UserSessionService
@using Lab.Components.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@rendermode InteractiveServer


<h3>Cubiculo</h3>

<div>
    <div>
        <p>Username: @username</p>
        <p>Role: @role</p>
    </div>
    <button class="btn btn-success" @onclick="TerminarTramite">Terminar Trámite</button>
    <button class="btn btn-primary" @onclick="SiguienteTramite">Siguiente Trámite</button>
</div>

@code {
    private string username;
    private string role;
    private Puesto puesto;  // hay que buscar que puesto tiene asignado el operario y traerlo de la bd
    private Tramite tramiteActual;  // hay qye buscar el tramite del puesto traido en la linea de arriba

    protected override async Task OnInitializedAsync()
    {
        var session = UserSessionService.GetCurrentSession();
        username = session.username ?? "No user";
        role = session.role ?? "No role";

        using var context = await DbFactory.CreateDbContextAsync();

        if (role == "Operario")
        {
            var usuario = await context.Usuario.FirstOrDefaultAsync(u => u.Username == username);

            if (usuario is Operario operario)
            {
                puesto = await context.Puesto.FirstOrDefaultAsync(p => p.NroPuesto == operario.PuestoAsignadoId);

                if (puesto != null)
                {
                    // Obtener el trámite actual del puesto
                    tramiteActual = await context.Tramite.FirstOrDefaultAsync(t => t.NroTramite == puesto.TramiteActual);

                    if (tramiteActual == null)
                    {
                        Console.WriteLine("No se encontró un trámite actual para este puesto.");
                    }
                }
                else
                {
                    Console.WriteLine("Error: No se encontró un puesto asignado para este operario.");
                }
            }
        }
    }

    private async Task TerminarTramite()
    {
        if (puesto != null && tramiteActual != null)
        {
            // Terminar el trámite
            puesto.TerminarTramite(tramiteActual);

            using var context = await DbFactory.CreateDbContextAsync();

            // Guardar los cambios en la base de datos
            context.Puesto.Update(puesto);
            context.Tramite.Update(tramiteActual);
            await context.SaveChangesAsync();

            Console.WriteLine("Trámite terminado.");
        }
        else
        {
            Console.WriteLine("Error: No hay trámite o puesto asignado.");
        }
    }

    private async Task SiguienteTramite()
    {
        if (puesto != null)
        {
            using var context = await DbFactory.CreateDbContextAsync();

            // Buscar el siguiente trámite sin número de puesto asignado
            var siguienteTramite = await context.Tramite.FirstOrDefaultAsync(t => string.IsNullOrEmpty(t.NroPuesto));

            if (siguienteTramite != null)
            {
                // Asignar el número de puesto del operario al siguiente trámite
                siguienteTramite.NroPuesto = puesto.NroPuesto.ToString();

                // Actualizar la base de datos
                context.Tramite.Update(siguienteTramite);
                await context.SaveChangesAsync();

                Console.WriteLine($"Se asignó el puesto {puesto.NroPuesto} al siguiente trámite: {siguienteTramite.NroTramite}");
            }
            else
            {
                Console.WriteLine("No se encontró un trámite disponible para asignar.");
            }
        }
        else
        {
            Console.WriteLine("Error: No hay puesto asignado para este operario.");
        }
    }
}
