@page "/EstadisticasHistorial"
@using Lab.Components.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserSessionService UserSessionService

@using ChartJs.Blazor
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Interop

@rendermode InteractiveServer

<h3> Filtros </h3>
<br />
<div>
    <!-- Filtros -->
    <label for="nroTramite">Nro. de Trámite:</label>
    <input type="text" id="nroTramite" @bind="nroTramite" class="form-control" />

    <label for="fechaInicio">Fecha de Inicio:</label>
    <input type="date" id="fechaInicio" @bind="fechaInicio" />

    <label for="fechaFin">Fecha de Fin:</label>
    <input type="date" id="fechaFin" @bind="fechaFin" />

    <label for="oficina">Oficina:</label>
    <select id="oficina" class="form-select" @onchange="OnOficinaChange">
        <option value="">Selecciona una oficina</option>
        @foreach (var oficina in OficinasDisponibles.Where(o => !string.IsNullOrWhiteSpace(o.Nombre)))
        {
            <option value="@oficina.idOficina">@oficina.Nombre</option>
        }
    </select>

    <button @onclick="ActualizarFiltros">Actualizar Filtros</button>
</div>

<br/>
<h3> Historial de Trámites </h3>
<br/>

@if (historial != null && historial.Count > 0)
{
    <!-- Tabla de Trámites -->
    <table class="table">
        <thead>
            <tr>
                <th>NroTramite</th>
                <th>CedulaCliente</th>
                <th>NroPuesto</th>
                <th>FechaInicio</th>
                <th>FechaFin</th>
                <th>Demora</th>
                <th>Oficina</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tramite in historial)
            {
                var demora = tramite.FechaFin.HasValue
                ? tramite.FechaFin.Value - tramite.FechaInicio
                : (TimeSpan?)null;

                <tr>
                    <td>@tramite.NroTramite</td>
                    <td>@tramite.CedulaCliente</td>
                    <td>@tramite.NroPuesto</td>
                    <td>@tramite.FechaInicio.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@tramite.FechaFin?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@(demora.HasValue ? $"{(int)demora.Value.TotalHours:D2}:{demora.Value.Minutes:D2}:{demora.Value.Seconds:D2}" : "N/A")</td>
                    <td>@tramite.idOficina</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No hay trámites terminados para mostrar.</p>
}

<h3>Trámites por Fechas</h3>
<Chart Config="_config"></Chart>

<button class=" btn  btn-secondary btn-lg" @onclick="HomeRed">
    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Volver
</button>
@code {
    private List<Tramite> historial;
    private DateTime fechaInicio = DateTime.Now.AddMonths(-1);
    private DateTime fechaFin = DateTime.Now;
    private LineConfig _config;  // Declaramos _config
    private Chart _chart;
    private int? idOficinaSeleccionada;
    private List<Oficina> OficinasDisponibles = new List<Oficina>();
    private string nroTramite = string.Empty;  // Para almacenar el valor de NroTramite


    protected override async Task OnInitializedAsync()
    {
        // Inicializar _config aquí
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Trámites Finalizados"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new Hover
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Fecha"
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                TooltipFormat = "ll HH:mm"
                            }
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Valor"
                            }
                        }
                    }
                    }
                }
            };

        await CargarOficinasDisponibles();
        await ActualizarFiltros();  
    }

    private async Task CargarOficinasDisponibles()
    {
        using var context = DbFactory.CreateDbContext();
        OficinasDisponibles = await context.Oficina.ToListAsync();
    }

    private async Task CargarHistorialTramites()
    {
        using var context = DbFactory.CreateDbContext();
        var query = context.Tramite
            .Where(t => t.FechaFin.HasValue && t.FechaFin >= fechaInicio && t.FechaFin <= fechaFin);

        // Filtrar por NroTramite si es proporcionado
        if (!string.IsNullOrEmpty(nroTramite))
        {
            if (int.TryParse(nroTramite, out int nroTramiteInt))  // Asegúrate de que NroTramite es un número válido
            {
                query = query.Where(t => t.NroTramite == nroTramiteInt);
            }
        }

        // Filtrar por oficina si se ha seleccionado
        if (idOficinaSeleccionada.HasValue)
        {
            query = query.Where(t => t.idOficina == idOficinaSeleccionada.Value);
        }

        historial = await query.ToListAsync();
    }


    private async Task CargarDatosGrafico()
    {
        var tramites = await ObtenerTramitesFinalizados(fechaInicio, fechaFin);

        // Asegúrate de que _config no sea null antes de acceder
        if (_config != null)
        {
            _config.Data.Labels.Clear();
            _config.Data.Datasets.Clear();

            List<DateTime> fechas = GenerarFechasRango(fechaInicio, fechaFin);
            List<int> cantidadTramites = fechas.Select(fecha => tramites.Count(t => t.FechaFin.Value.Date == fecha)).ToList();

            foreach (var fecha in fechas)
            {
                _config.Data.Labels.Add(fecha.ToString("yyyy-MM-dd"));
            }

            _config.Data.Datasets.Add(new LineDataset<int>(cantidadTramites)
                {
                    Label = "Trámites Finalizados",
                    BorderColor = "rgba(75,192,192,1)",
                    Fill = false
                });

            if (_chart != null)
            {
                await _chart.Update();
            }
        }
    }

    private List<DateTime> GenerarFechasRango(DateTime inicio, DateTime fin)
    {
        var fechas = new List<DateTime>();
        for (var fecha = inicio.Date; fecha <= fin.Date; fecha = fecha.AddDays(1))
        {
            fechas.Add(fecha);
        }
        return fechas;
    }

    private async Task OnOficinaChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int oficinaId) && oficinaId > 0)
        {
            idOficinaSeleccionada = oficinaId;
        }
        else
        {
            idOficinaSeleccionada = null;
        }
    }

    private async Task<List<Tramite>> ObtenerTramitesFinalizados(DateTime fechaInicio, DateTime fechaFin)
    {
        using var context = DbFactory.CreateDbContext();
        var query = context.Tramite
            .Where(t => t.FechaFin.HasValue && t.FechaFin >= fechaInicio && t.FechaFin <= fechaFin);

        if (idOficinaSeleccionada.HasValue)
        {
            query = query.Where(t => t.idOficina == idOficinaSeleccionada.Value);
        }

        return await query.ToListAsync();
    }

    private async Task ActualizarFiltros()
    {
        await CargarHistorialTramites();  // Actualiza los trámites con los filtros aplicados
        await CargarDatosGrafico();  // Actualiza el gráfico si es necesario
    }

    private void HomeRed()
    {
        Console.WriteLine($"ENTRE");
        var (username, role) = UserSessionService.GetCurrentSession();
        // Redirigir basado en el rol del usuario
        switch (role)
        {
            case "Administrador":
                NavigationManager.NavigateTo("/admin");
                Console.WriteLine($"Oficina seleccionada: {username}");
                break;
            case "Operario":
                NavigationManager.NavigateTo("/cubiculo");
                Console.WriteLine($"Oficina seleccionada: {username}");
                break;
            case "GerenteCalidad":
                NavigationManager.NavigateTo("/gerente-calidad");
                Console.WriteLine($"Oficina seleccionada: {username}");
                break;
            default:
                Console.WriteLine($"Oficina seleccionada: {username}");
                Console.WriteLine($"Oficina seleccionada: {role}");
                NavigationManager.NavigateTo("/");
                break;
        }
    }
}
