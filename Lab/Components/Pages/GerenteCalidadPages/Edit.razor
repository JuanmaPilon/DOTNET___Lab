@page "/gerentecalidads/edit"
@using Microsoft.EntityFrameworkCore
@using Lab.Components.Models
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>GerenteCalidad</h2>
<hr />
@if (GerenteCalidad is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="GerenteCalidad" OnValidSubmit="UpdateGerenteCalidad" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="GerenteCalidad.Username" value="@GerenteCalidad.Username" />
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="GerenteCalidad.Password" class="form-control" />
                    <ValidationMessage For="() => GerenteCalidad.Password" class="text-danger" />
                </div>
                <button type="submit" class=" btn  btn-secondary btn-lg">Save</button>
            </EditForm>
        </div>
    </div>
}
<br/>
<div>
    <a class=" btn  btn-secondary btn-lg" href="/gerentecalidads">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string Username { get; set; }

    [SupplyParameterFromForm]
    private GerenteCalidad? GerenteCalidad { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        GerenteCalidad ??= await context.GerenteCalidad.FirstOrDefaultAsync(m => m.Username == Username);

        if (GerenteCalidad is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateGerenteCalidad()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(GerenteCalidad!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!GerenteCalidadExists(GerenteCalidad!.Username))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/gerentecalidads");
    }

    private bool GerenteCalidadExists(string username)
    {
        using var context = DbFactory.CreateDbContext();
        return context.GerenteCalidad.Any(e => e.Username == username);
    }
}
