@page "/gerentecalidads"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Lab.Components.Models
@using Lab.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject UserSessionService UserSessionService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a class=" btn  btn-secondary btn-lg" href="gerentecalidads/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.GerenteCalidad">
    <PropertyColumn Property="gerentecalidad => gerentecalidad.Password" />

    <TemplateColumn Context="gerentecalidad">
        <a href="@($"gerentecalidads/edit?username={gerentecalidad.Username}")">Edit</a> |
        <a href="@($"gerentecalidads/details?username={gerentecalidad.Username}")">Details</a> |
        <a href="@($"gerentecalidads/delete?username={gerentecalidad.Username}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<button class=" btn  btn-secondary btn-lg" @onclick="HomeRed">
    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Volver
</button>

@code {
    private LabContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    protected override async Task OnInitializedAsync()
    {
        // Cargar las oficinas disponibles si es admin
        if (!UserSessionService.IsUserLoggedIn())
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        // Verificar el rol del usuario
        var (username, role) = UserSessionService.GetCurrentSession();

        if (role != "Administrador")
        {
            // Redirigir basado en el rol del usuario
            switch (role)
            {
                case "GerenteCalidad":
                    NavigationManager.NavigateTo("/gerente-calidad");
                    break;
                case "Operario":
                    NavigationManager.NavigateTo("/cubiculo");
                    break;
                default:
                    NavigationManager.NavigateTo("/");
                    break;
            }
            return;
        }
       
    }
    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private void HomeRed()
    {
        Console.WriteLine($"ENTRE");
        var (username, role) = UserSessionService.GetCurrentSession();
        // Redirigir basado en el rol del usuario
        switch (role)
        {
            case "Administrador":
                NavigationManager.NavigateTo("/admin");
                Console.WriteLine($"Oficina seleccionada: {username}");
                break;
            case "Operario":
                NavigationManager.NavigateTo("/cubiculo");
                Console.WriteLine($"Oficina seleccionada: {username}");
                break;
            case "GerenteCalidad":
                NavigationManager.NavigateTo("/gerente-calidad");
                Console.WriteLine($"Oficina seleccionada: {username}");
                break;
            default:
                Console.WriteLine($"Oficina seleccionada: {username}");
                Console.WriteLine($"Oficina seleccionada: {role}");
                NavigationManager.NavigateTo("/");
                break;
        }
    }
}
