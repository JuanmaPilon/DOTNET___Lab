@page "/tramites/delete"
@using Microsoft.EntityFrameworkCore
@using Lab.Components.Models
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserSessionService UserSessionService

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Tramite</h2>
    <hr />
    @if (tramite is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CedulaCliente</dt>
            <dd class="col-sm-10">@tramite.CedulaCliente</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">NroPuesto</dt>
            <dd class="col-sm-10">@tramite.NroPuesto</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FechaInicio</dt>
            <dd class="col-sm-10">@tramite.FechaInicio</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FechaFin</dt>
            <dd class="col-sm-10">@tramite.FechaFin</dd>
        </dl>
        <EditForm method="post" Model="tramite" OnValidSubmit="DeleteTramite" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(tramite is null)">Delete</button> |
            <a href="/tramites">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Tramite? tramite;

    [SupplyParameterFromQuery]
    private int NroTramite { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        if (!UserSessionService.IsUserLoggedIn())
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        // Verificar el rol del usuario
        if (!UserSessionService.HasRole("Administrador"))
        {
            var (username, role) = UserSessionService.GetCurrentSession();

            // Redirigir basado en el rol del usuario
            switch (role)
            {
                case "Operario":
                    NavigationManager.NavigateTo("/cubiculo");
                    break;
                case "GerenteCalidad":
                    NavigationManager.NavigateTo("/gerente-calidad");
                    break;
                default:
                    NavigationManager.NavigateTo("/");
                    break;
            }
            return;
        }
        tramite = await context.Tramite.FirstOrDefaultAsync(m => m.NroTramite == NroTramite);

        if (tramite is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteTramite()
    {
        using var context = DbFactory.CreateDbContext();
        context.Tramite.Remove(tramite!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/tramites");
    }
}
