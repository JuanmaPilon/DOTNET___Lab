@page "/tramites/create/{oficinaId:int}"
@using Microsoft.EntityFrameworkCore
@using Lab.Components.Models
@using Lab.Components.Hubs
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR
@inject IHubContext<Lab.Components.Hubs.TramiteHub> TramiteHubContext
@inject IJSRuntime JS

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Tramite</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Tramite" OnValidSubmit="AddTramite" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="cedulacliente" class="form-label">CedulaCliente:</label>
                <InputNumber id="cedulacliente" @bind-Value="Tramite.CedulaCliente" class="form-control" />
                <ValidationMessage For="() => Tramite.CedulaCliente" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>

        @if (ErrorMessage != null)
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }
    </div>
</div>

<div>
    <a href="/tramites">Back to List</a>
</div>

@code {
    [Parameter] public int OficinaId { get; set; }

    [SupplyParameterFromForm]
    private Tramite Tramite { get; set; } = new();

    private string? ErrorMessage { get; set; }

    private async Task AddTramite()
    {
        using var context = DbFactory.CreateDbContext();

        // Verifica si ya existe la CI
        var operarioExistente = await context.Tramite
            .AsNoTracking()
            .FirstOrDefaultAsync(o => o.CedulaCliente == Tramite.CedulaCliente);

        if (operarioExistente != null)
        {
            ErrorMessage = "Ya existe un cliente con esa cédula.";
            StateHasChanged(); // Actualiza la vista para mostrar el mensaje de error
            return;
        }

        // Asignar valores predeterminados en el backend
        Tramite.NroPuesto = "--";
        Tramite.FechaInicio = DateTime.Now;
        Tramite.FechaFin = null;
        Tramite.idOficina = OficinaId;

        context.Tramite.Add(Tramite);
        await context.SaveChangesAsync();

         

        // Enviar a los monitores de la oficina que corresponda
        await TramiteHubContext.Clients
            .Group($"Oficina_{OficinaId}")  
            .SendAsync("ReceiveTramiteUpdate", new
            {
                NroTramite = Tramite.NroTramite,
                CedulaCliente = Tramite.CedulaCliente,
               
            });

        // Notificar a los clientes conectados al monitor que hay un nuevo trámite
        await TramiteHubContext.Clients.All.SendAsync("ReceiveTramiteUpdate");

        // Notificar a los clientes conectados a la página de estadísticas para que actualicen la gráfica
        await TramiteHubContext.Clients.All.SendAsync("UpdateStatistics");


        NavigationManager.NavigateTo($"/tramites/create/{OficinaId}");
    }
}
