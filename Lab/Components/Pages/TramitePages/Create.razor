@page "/tramites/create"
@using Microsoft.EntityFrameworkCore
@using Lab.Components.Models
@using Lab.Components.Hubs
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR
@inject IHubContext<Lab.Components.Hubs.TramiteHub> TramiteHubContext

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Tramite</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Tramite" OnValidSubmit="AddTramite" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="cedulacliente" class="form-label">CedulaCliente:</label>
                <InputNumber id="cedulacliente" @bind-Value="Tramite.CedulaCliente" class="form-control" />
                <ValidationMessage For="() => Tramite.CedulaCliente" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/tramites">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Tramite Tramite { get; set; } = new();

    private async Task AddTramite()
    {
        // Asignar valores predeterminados en el backend
        Tramite.NroPuesto = "--";             // Valor predeterminado
        Tramite.FechaInicio = DateTime.Now;   // Fecha actual
        Tramite.FechaFin = null;              // No se establece fecha de fin

        using var context = DbFactory.CreateDbContext();
        context.Tramite.Add(Tramite);
        await context.SaveChangesAsync();

        // Notificar a los clientes conectados al monitor que hay un nuevo trámite
        await TramiteHubContext.Clients.All.SendAsync("ReceiveTramiteUpdate");

        NavigationManager.NavigateTo("/tramites");
    }
}

