@page "/"
@attribute [StreamRendering]
@inject NavigationManager Navigation
@inject UserSessionService UserSessionService
@using Lab.Components.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@rendermode InteractiveServer

<h3>Login</h3>

<div>
    <label>Username:</label>
    <input @bind="username" />
    <br />
    <label>Password:</label>
    <input type="password" @bind="password" />
    <br />
    <button @onclick="Login">Login</button>
</div>

@code {
    private string? username;
    private string? password;

    private async Task Login()
    {
        Console.WriteLine("Login button clicked!");

        Usuario user = await AuthenticateUser(username, password);

        if (user != null)
        {
            Console.WriteLine($"User authenticated: {user.Username}, Role: {user.GetRole()}");

            // Guardar datos en la sesión
            UserSessionService.SetUserSession(user.Username, user.GetRole());
            StateHasChanged(); // Fuerza el re-renderizado del componente

            // Navegar basado en el rol
            string role = user.GetRole();
            switch (role)
            {
                case "Administrador":
                    Console.WriteLine("Admin authenticated");
                    Navigation.NavigateTo("/admin", forceLoad: true);
                    break;
                case "Operario":
                    Console.WriteLine("Operario authenticated");
                    Navigation.NavigateTo("/cubiculo", forceLoad: true);
                    break;
                case "GerenteCalidad":
                    Console.WriteLine("GerenteCalidad authenticated");
                    Navigation.NavigateTo("/gerente-calidad", forceLoad: true);
                    break;
                default:
                    Console.WriteLine("Redirigiendo a la página de inicio.");
                    Navigation.NavigateTo("/");
                    break;
            }
        }
        else
        {
            Console.WriteLine("Authentication failed. User not found.");
        }
    }

    // Autenticación contra la base de datos
    private async Task<Usuario> AuthenticateUser(string username, string password)
    {
        using var context = await DbFactory.CreateDbContextAsync();

        // Buscar el usuario por nombre de usuario
        var user = await context.Usuario
            .FirstOrDefaultAsync(u => u.Username == username);

        if (user != null && user.Password == password)  // Validar contraseñas
        {
            return user;
        }

        Console.WriteLine("Authentication failed");
        return null;
    }
}
