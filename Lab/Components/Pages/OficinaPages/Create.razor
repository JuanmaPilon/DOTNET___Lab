@page "/oficinas/create"
@using Microsoft.EntityFrameworkCore
@using Lab.Components.Models
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserSessionService UserSessionService

<PageTitle>Create</PageTitle>

<h1>Create Oficina</h1>
<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="@Oficina" OnValidSubmit="AddOficina" FormName="create">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/oficinas">Back to List</a>
</div>

@code {
    private Oficina Oficina { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        // Verificar si el usuario está logueado
        if (!UserSessionService.IsUserLoggedIn())
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        // Verificar el rol del usuario
        if (!UserSessionService.HasRole("Administrador"))
        {
            var (username, role) = UserSessionService.GetCurrentSession();

            // Redirigir basado en el rol del usuario
            switch (role)
            {
                case "Operario":
                    NavigationManager.NavigateTo("/cubiculo");
                    break;
                case "GerenteCalidad":
                    NavigationManager.NavigateTo("/gerente-calidad");
                    break;
                default:
                    NavigationManager.NavigateTo("/");
                    break;
            }
            return;
        }
    }
    private async Task AddOficina()
    {
        using var context = DbFactory.CreateDbContext();
        context.Oficina.Add(Oficina);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/oficinas");
    }
}
