@page "/oficinas/create"
@using Microsoft.EntityFrameworkCore
@using Lab.Components.Models
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager
@using System.Text.Json

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Oficina</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@Oficina" OnValidSubmit="@AddOficina" method="post" FormName="createOficinaForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label>ID Oficina:</label>
                <InputNumber @bind-Value="Oficina.idOficina" class="form-control" />
                <ValidationMessage For="@(() => Oficina.idOficina)" />
            </div>

            <div>
                <label>Puestos Existentes:</label>
                <select @bind="selectedPuestoId">
                    <option value="">Seleccione un puesto</option>
                    @if (puestosExistentes != null && puestosExistentes.Count > 0)
                    {
                        @foreach (var puesto in puestosExistentes)
                        {
                            <option value="@puesto.NroPuesto">@puesto.NroPuesto</option>
                        }
                    }
                    else
                    {
                        <option value="" disabled>No hay puestos disponibles</option>
                    }
                </select>
            </div>

            <button type="submit">Agregar Oficina</button>
        </EditForm>
    </div>
</div>

@code {
    private Oficina Oficina { get; set; } = new Oficina();
    private int? selectedPuestoId { get; set; }
    private List<Puesto> puestosExistentes;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        puestosExistentes = await context.Puesto.ToListAsync();
        Console.WriteLine($"Oficina inicializada: {JsonSerializer.Serialize(Oficina)}");
    }

    private async Task AddOficina()
    {
        Console.WriteLine("AddOficina llamado");
        Console.WriteLine($"ID Oficina antes de validación: {Oficina.idOficina}");
        Console.WriteLine($"Oficina detalles: {JsonSerializer.Serialize(Oficina)}");

        if (Oficina.idOficina <= 0)
        {
            throw new InvalidOperationException("El ID de la oficina debe ser un valor positivo.");
        }

        using var context = DbFactory.CreateDbContext();

        // Asigna puesto seleccionado si hay uno
        if (selectedPuestoId.HasValue)
        {
            var puesto = await context.Puesto.FindAsync(selectedPuestoId.Value);
            if (puesto != null)
            {
                Oficina.ListaPuestos.Add(puesto);
            }
        }

        context.Oficina.Add(Oficina);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/oficinas");
    }
}
