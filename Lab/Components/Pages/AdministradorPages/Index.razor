@page "/administradors"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Lab.Components.Models
@using Lab.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserSessionService UserSessionService

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="administradors/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Administrador">
    <PropertyColumn Property="administrador => administrador.Password" />

    <TemplateColumn Context="administrador">
        <a href="@($"administradors/edit?username={administrador.Username}")">Edit</a> |
        <a href="@($"administradors/details?username={administrador.Username}")">Details</a> |
        <a href="@($"administradors/delete?username={administrador.Username}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private LabContext context = default!;

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();
        if (!UserSessionService.IsUserLoggedIn())
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        // Verificar el rol del usuario
        if (!UserSessionService.HasRole("Administrador"))
        {
            var (username, role) = UserSessionService.GetCurrentSession();

            // Redirigir basado en el rol del usuario
            switch (role)
            {
                case "Operario":
                    NavigationManager.NavigateTo("/cubiculo");
                    break;
                case "GerenteCalidad":
                    NavigationManager.NavigateTo("/gerente-calidad");
                    break;
                default:
                    NavigationManager.NavigateTo("/");
                    break;
            }
            return;
        }


    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
