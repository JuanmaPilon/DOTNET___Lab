@page "/monitorAdmin"
@using Lab.Components.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject UserSessionService UserSessionService

@rendermode InteractiveServer

<h3>Monitor de Trámites</h3>

@if (TramitesActivos != null && TramitesActivos.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Nro Trámite</th>
                <th>Cédula Cliente</th>
                <th>Nro Puesto</th>
                <th>Fecha Inicio</th>
                <th>Fecha Fin</th>
                <th>Oficina</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tramite in TramitesActivos)
            {
                <tr class="@(tramiteResaltadoId == tramite.NroTramite ? "table-warning" : "")">
                    <td>@tramite.NroTramite</td>
                    <td>@tramite.CedulaCliente</td>
                    <td>@tramite.NroPuesto</td>
                    <td>@tramite.FechaInicio.ToShortDateString()</td>
                    <td>@(tramite.FechaFin?.ToShortDateString() ?? "--/--/--")</td>
                    <td>@tramite.idOficina</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No hay trámites activos.</p>
}

<button class=" btn  btn-secondary btn-lg" @onclick="HomeRed">
    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Volver
</button>

@code {
    private List<Tramite> TramitesActivos { get; set; } = new();
    private HubConnection hubConnection;
    private int? tramiteResaltadoId; // ID del trámite a resaltar

    protected override async Task OnInitializedAsync()
    {
        // Cargar las oficinas disponibles si es admin
        if (!UserSessionService.IsUserLoggedIn())
        {
            Navigation.NavigateTo("/");
            return;
        }

        // Verificar el rol del usuario
        var (username, role) = UserSessionService.GetCurrentSession();

        if (role != "Administrador")
        {
            // Redirigir basado en el rol del usuario
            switch (role)
            {
                case "GerenteCalidad":
                    Navigation.NavigateTo("/gerente-calidad");
                    break;
                case "Operario":
                    Navigation.NavigateTo("/cubiculo");
                    break;
                default:
                    Navigation.NavigateTo("/");
                    break;
            }
            return;
        }

        await LoadTramites();

        // Configurar conexión de SignalR
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tramiteHub"))
            .Build();

        // Escuchar el evento "ReceiveTramiteUpdate" para recargar trámites activos
        hubConnection.On("ReceiveTramiteUpdate", async () =>
        {
            await LoadTramites();  // Recargar trámites
            await InvokeAsync(StateHasChanged); // Asegurar actualización de la UI en el Dispatcher
        });

        // Escuchar el evento "ReceiveLlamarDeNuevo" para resaltar un trámite específico
        hubConnection.On<int>("ReceiveLlamarDeNuevo", (nroTramite) =>
        {
            tramiteResaltadoId = nroTramite;  // Asignar el ID del trámite a resaltar
            InvokeAsync(StateHasChanged); // Usar InvokeAsync para actualizar la UI en el hilo correcto
        });

        await hubConnection.StartAsync();
    }

    private async Task LoadTramites()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        TramitesActivos = await context.Tramite.ToListAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void HomeRed()
    {
        Console.WriteLine($"ENTRE");
        var (username, role) = UserSessionService.GetCurrentSession();
        // Redirigir basado en el rol del usuario
        switch (role)
        {
            case "Administrador":
                Navigation.NavigateTo("/admin");
                Console.WriteLine($"Oficina seleccionada: {username}");
                break;
            case "Operario":
                Navigation.NavigateTo("/cubiculo");
                Console.WriteLine($"Oficina seleccionada: {username}");
                break;
            case "GerenteCalidad":
                Navigation.NavigateTo("/gerente-calidad");
                Console.WriteLine($"Oficina seleccionada: {username}");
                break;
            default:
                Console.WriteLine($"Oficina seleccionada: {username}");
                Console.WriteLine($"Oficina seleccionada: {role}");
                Navigation.NavigateTo("/");
                break;
        }
    }
}
