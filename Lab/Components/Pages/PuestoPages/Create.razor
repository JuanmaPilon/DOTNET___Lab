@page "/puestos/create"
@using Microsoft.EntityFrameworkCore
@using Lab.Components.Models
@inject IDbContextFactory<Lab.Data.LabContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserSessionService UserSessionService

@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Puesto</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@Puesto" OnValidSubmit="AddPuesto" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="form-group">
                <label for="oficinaSelect">Selecciona Oficina</label>
                <select @onchange="OnOficinaSelected" class="form-control" id="oficinaSelect" required>
                    <option value="">Seleccione una oficina</option>
                    @foreach (var oficina in Oficinas)
                    {
                        <option value="@oficina.idOficina">@oficina.idOficina</option> 
                    }
                </select>
                <ValidationMessage For="@(() => Puesto.idOficina)" class="text-danger" />
            </div>

            <p>Oficina seleccionada: @Puesto.idOficina</p> 

            <button type="submit" class=" btn  btn-secondary btn-lg">Create</button>
        </EditForm>
    </div>
</div>
<br/>
<div>
    <a class=" btn  btn-secondary btn-lg" href="/puestos">Back to List</a>
</div>

@code {
    private Puesto Puesto { get; set; } = new() { idOficina = 0 };
    private List<Oficina> Oficinas { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        if (!UserSessionService.IsUserLoggedIn())
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        // Verificar el rol del usuario
        if (!UserSessionService.HasRole("Administrador"))
        {
            var (username, role) = UserSessionService.GetCurrentSession();

            // Redirigir basado en el rol del usuario
            switch (role)
            {
                case "Operario":
                    NavigationManager.NavigateTo("/cubiculo");
                    break;
                case "GerenteCalidad":
                    NavigationManager.NavigateTo("/gerente-calidad");
                    break;
                default:
                    NavigationManager.NavigateTo("/");
                    break;
            }
            return;
        }
        Oficinas = await context.Oficina.ToListAsync();
       
    }

    private void OnOficinaSelected(ChangeEventArgs e)
    {
        
        if (int.TryParse(e.Value.ToString(), out int selectedId))
        {
            Puesto.idOficina = selectedId;
            Console.WriteLine($"Oficina seleccionada: {Puesto.idOficina}"); 
            StateHasChanged(); 
        }
        else
        {
            Console.WriteLine("Error al convertir el ID de la oficina.");
        }
    }

    private async Task AddPuesto()
    {
        Console.WriteLine($"idOficina ingresado: {Puesto.idOficina}");

        if (Puesto.idOficina == 0)
        {
            Console.WriteLine("Error: idOficina no fue seleccionado correctamente.");
            return;
        }

        Puesto.Estado = true;
        Puesto.TramiteActual = 0;

        using var context = DbFactory.CreateDbContext();

        var oficinaExiste = await context.Oficina.AnyAsync(o => o.idOficina == Puesto.idOficina);

        if (!oficinaExiste)
        {
            Console.WriteLine("Error: La Oficina no existe.");
            return;
        }

        context.Puesto.Add(Puesto);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/puestos");
    }
}
